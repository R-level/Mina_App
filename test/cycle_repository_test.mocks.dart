// Mocks generated by Mockito 5.4.5 from annotations
// in mina_app/test/cycle_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mina_app/data/database/databaseHelper.dart' as _i3;
import 'package:mina_app/data/model/model.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite_common_ffi/sqflite_ffi.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i3.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Database> get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _i4.Future<_i2.Database>.value(
          _FakeDatabase_0(this, Invocation.getter(#database)),
        ),
      ) as _i4.Future<_i2.Database>);

  @override
  _i4.Future<void> insertOrUpdateUserSetting(String? key, String? value) =>
      (super.noSuchMethod(
        Invocation.method(#insertOrUpdateUserSetting, [key, value]),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<String?> getUserSetting(String? key) => (super.noSuchMethod(
        Invocation.method(#getUserSetting, [key]),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<Map<String, String>> getAllSettings() => (super.noSuchMethod(
        Invocation.method(#getAllSettings, []),
        returnValue: _i4.Future<Map<String, String>>.value(
          <String, String>{},
        ),
      ) as _i4.Future<Map<String, String>>);

  @override
  _i4.Future<void> insertDay(_i5.Day? day) => (super.noSuchMethod(
        Invocation.method(#insertDay, [day]),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i5.Day?> getDay(DateTime? date) => (super.noSuchMethod(
        Invocation.method(#getDay, [date]),
        returnValue: _i4.Future<_i5.Day?>.value(),
      ) as _i4.Future<_i5.Day?>);

  @override
  _i4.Future<void> updateDay(_i5.Day? day) => (super.noSuchMethod(
        Invocation.method(#updateDay, [day]),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

/*  @override
   _i4.Future<int> deleteDayEntry(DateTime? date) =>
      (super.noSuchMethod(
            Invocation.method(#deleteDayEntry, [date]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>); */

  @override
  _i4.Future<void> insertPeriodDay(_i5.PeriodDay? periodDay) =>
      (super.noSuchMethod(
        Invocation.method(#insertPeriodDay, [periodDay]),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

/*   @override
  _i4.Future<void> deletePeriodDay(DateTime? date) =>
      (super.noSuchMethod(
            Invocation.method(#deletePeriodDay, [date]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>); */

  @override
  _i4.Future<List<_i5.Day>> getCombinedDayAndPeriodDayRecords() =>
      (super.noSuchMethod(
        Invocation.method(#getCombinedDayAndPeriodDayRecords, []),
        returnValue: _i4.Future<List<_i5.Day>>.value(<_i5.Day>[]),
      ) as _i4.Future<List<_i5.Day>>);
}
